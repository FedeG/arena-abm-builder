{"name":"Arena-abm-builder","tagline":"Framework for create desktop interface for ABM with Arena framework","body":"Arena ABM Builder\r\n===============\r\n\r\nFramework for creating an ABM with Arena-UI framework\r\n\r\nRequerimientos:\r\n---------------\r\n\r\n- JRE 1.8 o superior\r\n- Maven 3\r\n- Arena Framework\r\n\r\nContenido del framework:\r\n------------------------\r\n\r\n- **TestImplementacion/Auto**: Clase de ejemplo para demostracion del framework.\r\n- **TestImplementacion/Chofer**: Clase de ejemplo para demostracion del framework.\r\n- **TestImplementacion/TestSimpleApplication**: Applicacion que usa el ABM para la clase Auto.\r\n- **TestImplementacion/TestApplication**: Aplicacion que usa la multiABM con la clase Auto y Chofer.\r\n\r\n\r\n- **annotations.abm/Title**: annotation para la clase con la cual queremos trabajar en el ABM. Sus parametros son:\r\n\t- **title**: titulo del ABM, su valor default es \"ABM\" \r\n\t- **addMethod**: Nombre del metodo que la clase contiene para cuando se agrega un elemento en el ABM, su valor default es \"\";\r\n\t- **editMethod**: Nombre del metodo que la clase contiene para cuando se modifica un elemento en el ABM, su valor default es \"\";\r\n\t- **removeMethod**: Nombre del metodo que la clase contiene para cuando se elimina un elemento en el ABM, su valor default es \"\";\r\n\t- **getInitialMethod**: Nombre del metodo que la clase contiene para cuando se abre el ABM y se cargan los datos iniciales, su valor default es \"\";\r\n\r\n- **annotations.abm/Validator**: Esta clase nos da los validadores predefinidos y usuales. Estos validadores son:\r\n\t- **validateUserName**: Valida que el dato ingresado sea con numeros, letras, _ o - y que no supere los 15 caracteres.\r\n\t- **validateNotNumbersUnlimited**: Valida que el dato ingresado sea solo con letras y sin limite\r\n\t- **validateNotNumbersLimited**: Valida que el dato ingresado sea solo con letras y que no supere los 30 caracteres.\r\n\t- **validateNumbers**: Valida que el dato ingresado sea solo con numeros y sin limite.\r\n\r\n- **annotations.visualWidgets/FieldCheck**: annotations de atributo para atributos Boolean, sus parametros pueden ser:\r\n\t- **name**: Nombre para mostrar e indicar que es este atributo, su valor default es \"\"\r\n\t- **modifiable**: Indica si se puede modificar, su valor default es True\r\n\r\n- **annotations.visualWidgets/FieldText**: annotations de atributo para atributos String\r\n\t- **name**: Nombre para mostrar e indicar que es este atributo, su valor default es \"\"\r\n\t- **modifiable**: Indica si se puede modificar, su valor default es True\r\n\t- **required**: Indica si el atributo es requerido si o si, su valor default es False\r\n\t- **validator**: Nombre del validador dentro de la clase para este atributo , su valor default es \"\"\r\n\t- **fwValidator**: Nombre del validador predefinido por el framework, su valor default es \"\"\r\n\r\n- **annotations.visualWidgets/FieldSelect**: annotations de atributo para atributos String y con opciones listadas \r\n\t- **name**: Nombre para mostrar e indicar que es este atributo, su valor default es \"\"\r\n\t- **modifiable**: Indica si se puede modificar, su valor default es True\r\n\t- **required**: Indica si el atributo es requerido si o si, su valor default es False\r\n\t- **choices**: Nombre del atributo donde esta la lista de datos posibles para ese atributo.\r\n\r\n- **implementation.ui/MainWindow**: Clase que nos permite crear una ABM para una clase\r\n- **implementation.ui/MultiMainWindow**: Clase que nos permite crear una ABM de multiples clases.\r\n\r\n\r\nManual de Usuario y ejemplos de uso:\r\n------------------------------------\r\n\r\nAntes de comenzar, hay que saber para que se utiliza este framework y que facilidades nos da.\r\nEste framework es para la creaci√≥n automatica de una interfaz de usuario con funcionalidad de ABM para cualquier tipo de Entidad.\r\n\r\nEjemplo de uso para una Clase:\r\n------------------------------\r\n\r\nEn este caso procederemos a crear un ABM de una clase Auto.\r\n\r\nPara este ejemplo partimos de una clase con el siguiente codigo:\r\n\r\n```java\r\npublic class Auto {\r\n\t\r\n\tpublic String nombre;\r\n\tpublic String modelo;\r\n\tpublic String patente;\r\n\tpublic boolean tienePatente;\r\n\tpublic String provincia;\r\n\t\r\n}\r\n```\r\n\r\nPara poder crear una ABM de esta clase, el framework provee una clase llamada FWObject de la cual la clase Auto tiene que heredar.\r\nEntonces la clase Auto queda con el siguiento codigo:\r\n\r\n```java\r\npublic class Auto extends FWObject {\r\n\t\r\n\tpublic String nombre;\r\n\tpublic String modelo;\r\n\tpublic String patente;\r\n\tpublic boolean tienePatente;\r\n\tpublic String provincia;\r\n\t\r\n}\r\n```\r\n\r\nPara que Auto sea una clase que el ABM pueda comprender hay que agragar el annotation Title.\r\nEn este caso vamos a agregar que el ABM tenga el titulo \"Autos ABM\"\r\n\r\n```java\r\n@Title(title = \"Autos ABM\")\r\npublic class Auto extends FWObject {\r\n\t\r\n\tpublic String nombre;\r\n\tpublic String modelo;\r\n\tpublic String patente;\r\n\tpublic boolean tienePatente;\r\n\tpublic String provincia;\r\n\t\r\n}\r\n```\r\n\r\nUna vez creado esto podemos empezar a agregar annotation para los atributos.\r\nEn este caso vamos a agregar los siguiente annotation:\r\n\r\n- **FieldText** para los atributos de tipo String\r\n- **FieldCheck** para los atributos de tipo Boolean\r\n- **FieldSelector** para los atributos de tipo String que tengan opciones definidas\r\n\r\nCon lo que el codigo de Auto queda de la siguiente forma:\r\n\r\n```java\r\n@Title(title = \"Autos ABM\")\r\npublic class Auto extends FWObject {\r\n\t\r\n\t@FieldText(name = \"Nombre del automotor\")\r\n\tpublic String nombre;\r\n\t\r\n\t@FieldText(name = \"Modelo del automotor\")\r\n\tpublic String modelo;\r\n\t\r\n\t@FieldText(name = \"Patente del automotor\")\r\n\tpublic String patente;\r\n\t\r\n\t@FieldCheck(name = \"Tiene patente\")\r\n\tpublic boolean tienePatente;\r\n\t\r\n\t@FieldSelector(choices = \"provincias\", name = \"Provincias\")\r\n\tpublic String provincia;\r\n\t\r\n\tString[] provincias = { \"Buenos Aires\", \"Cordoba\", \"La Rioja\", \"Chaco\", \"Catamarca\" };\r\n\t\r\n}\r\n```\r\n\r\nComo puede verse en el ejemplo del codigo con las annotations para atributos, cada atributo tiene en la annotation un **name** que es el texto con el cual se pide el dato dentro del ABM.\r\nAdemas en el caso del FieldSelector se agrega un parametro **choices** con el cual indicamos el nombre de la varible de clase donde se encuentran las opciones y mas abajo declaramos la variable que es una lista de Strings con las opciones pocibles para ese atributo.\r\n   \r\nAhora vamos a agregarle el dato de si algun atributo no es modificable, para eso existe en cualquier annotation de atributo el parametro **modifiable** que por default es True.\r\nVamos a definir que el atributo provincia no es modificable:\r\n\r\n```java\r\n@Title(title = \"Autos ABM\")\r\npublic class Auto extends FWObject {\r\n\t\r\n\t@FieldText(name = \"Nombre del automotor\")\r\n\tpublic String nombre;\r\n\t\r\n\t@FieldText(name = \"Modelo del automotor\")\r\n\tpublic String modelo;\r\n\t\r\n\t@FieldText(name = \"Patente del automotor\")\r\n\tpublic String patente;\r\n\t\r\n\t@FieldCheck(name = \"Tiene patente\")\r\n\tpublic boolean tienePatente;\r\n\t\r\n\t@FieldSelector(choices = \"provincias\", modifiable = false, name = \"Provincias\")\r\n\tpublic String provincia;\r\n\t\r\n\tString[] provincias = { \"Buenos Aires\", \"Cordoba\", \"La Rioja\", \"Chaco\", \"Catamarca\" };\r\n\t\r\n}\r\n```\r\n\r\nAhora vamos a agregarle el dato de si algun atributo es si o si requerido, para eso existe en cualquier annotation de atributo el parametro **required** que por default es False.\r\nVamos a definir que el atributo patente es requerido:\r\n\r\n\r\n```java\r\n@Title(title = \"Autos ABM\")\r\npublic class Auto extends FWObject {\r\n\t\r\n\t@FieldText(name = \"Nombre del automotor\")\r\n\tpublic String nombre;\r\n\t\r\n\t@FieldText(name = \"Modelo del automotor\")\r\n\tpublic String modelo;\r\n\t\r\n\t@FieldText(name = \"Patente del automotor\", required=true)\r\n\tpublic String patente;\r\n\t\r\n\t@FieldCheck(name = \"Tiene patente\")\r\n\tpublic boolean tienePatente;\r\n\t\r\n\t@FieldSelector(choices = \"provincias\", modifiable = false, name = \"Provincias\")\r\n\tpublic String provincia;\r\n\t\r\n\tString[] provincias = { \"Buenos Aires\", \"Cordoba\", \"La Rioja\", \"Chaco\", \"Catamarca\" };\r\n\t\r\n}\r\n```\r\n\r\nPara agregar mas opciones y hacer que el ABM sea mucho mejor, existen los validadores que se ejecutan en tiempo real miestras los usuarios ingresan datos.\r\nPara validar el framework ofrece dos posibles parametros en todos los annotations:\r\n- **fwValidator**: Validadores predefinidos por el framework\r\n- **validator**: Nombre del metodo validador que la clase tenga\r\n\r\nPara mostrar el uso vamos a agregar un validador en la clase **validarPatente** y un fwValidator llamado **validateNumbers** que valida que el dato ingresado sea numerico.\r\n\r\n```java\r\n@Title(title = \"Autos ABM\")\r\npublic class Auto extends FWObject {\r\n\t\r\n\t@FieldText(name = \"Nombre del automotor\")\r\n\tpublic String nombre;\r\n\t\r\n\t@FieldText(name = \"Modelo del automotor\", fwValidator=\"validateNumbers\")\r\n\tpublic String modelo;\r\n\t\r\n\t@FieldText(name = \"Patente del automotor\", required=true, validator=\"validarPatente\")\r\n\tpublic String patente;\r\n\t\r\n\t@FieldCheck(name = \"Tiene patente\")\r\n\tpublic boolean tienePatente;\r\n\t\r\n\t@FieldSelector(choices = \"provincias\", modifiable = false, name = \"Provincias\")\r\n\tpublic String provincia;\r\n\t\r\n\tString[] provincias = { \"Buenos Aires\", \"Cordoba\", \"La Rioja\", \"Chaco\", \"Catamarca\" };\r\n\t\t\r\n\tpublic boolean validarPatente(String patente){\r\n\t\tString PATENTE_PATTERN = \"^[a-zA-Z]{0,3}[0-9]{0,3}$\";\r\n\t\treturn Pattern.compile(PATENTE_PATTERN).matcher(patente).matches();\r\n\t}\r\n\r\n}\r\n```\r\n\r\nCon esto tenemos toda una Clase adaptada para el ABM. \r\nAlgo mas que podemos agregarle son metodos para persistencia propia de los datos.\r\nPara lograr esto el framework ofrece los siguientes parametros en el annotation **Title**:\r\n\r\n- **addMethod**: Metodo para agregar un objeto Auto\r\n- **editMethod**: Metodo para modificar un objeto Auto\r\n- **removeMethod**: Metodo para eliminar un objeto Auto\r\n- **getInitialMethod**: Metodo para obtener los datos iniciales\r\n\r\nEn este caso vamos a agregar un metodo que nos da los datos iniciales\r\n\r\n```java\r\n@Title(title = \"Autos ABM\", getInitialMethod=\"getAutos\")\r\npublic class Auto extends FWObject { \r\n\r\n\t@FieldText(name = \"Nombre del automotor\")\r\n\tpublic String nombre;\r\n\t\r\n\t@FieldText(name = \"Modelo del automotor\", fwValidator=\"validateNumbers\")\r\n\tpublic String modelo;\r\n\t\r\n\t@FieldText(name = \"Patente del automotor\", required=true, validator=\"validarPatente\")\r\n\tpublic String patente;\r\n\t\r\n\t@FieldCheck(name = \"Tiene patente\")\r\n\tpublic boolean tienePatente;\r\n\t\r\n\t@FieldSelector(choices = \"provincias\", modifiable = false, name = \"Provincias\")\r\n\tpublic String provincia;\r\n\t\r\n\tString[] provincias = { \"Buenos Aires\", \"Cordoba\", \"La Rioja\", \"Chaco\", \"Catamarca\" };\r\n\t\t\r\n\tpublic boolean validarPatente(String patente){\r\n\t\tString PATENTE_PATTERN = \"^[a-zA-Z]{0,3}[0-9]{0,3}$\";\r\n\t\treturn Pattern.compile(PATENTE_PATTERN).matcher(patente).matches();\r\n\t}\r\n\r\n\tpublic List<Auto> getAutos(){\r\n\t\tArrayList<Auto> autos = new ArrayList<Auto>();\r\n\t\tautos.add(new Auto(\"Citroen C3\", \"JPU409\", \"Buenos Aires\", true));\r\n\t\tautos.add(new Auto(\"Citroen C4\", \"CVU429\", \"Catamarca\", true));\r\n\t\tautos.add(new Auto(\"Ford Ka\", \"ERD123\", \"Chaco\", true));\r\n\t\tautos.add(new Auto(\"Volkswagen Gol\", \"\", \"La Rioja\", false));\r\n\t\treturn autos; \r\n\t}\r\n\r\n}\r\n```\r\n\r\nCon todo esto ya tenemos una clase Auto totalmente configurada para poder hacer el ABM.\r\nPara generar el ABM vamos a crear un main dentro de una clase de Test para mostrar el como generar un ABM:\r\n  \r\n```java\r\n\r\nimport implementation.applicationModel.ABMApplicationModel;\r\nimport implementation.ui.MainWindow;\r\nimport org.uqbar.arena.Application;\r\nimport org.uqbar.arena.windows.Window;\r\n\r\npublic class TestApplication extends Application {\r\n\t\r\n\t@Override\r\n\tprotected Window<?> createMainWindow() {\r\n\t\treturn new MainWindow(this, new ABMApplicationModel(Auto.class));\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tnew TestApplication().start();\r\n\t}\r\n\r\n}\r\n```\r\n\r\nCon todo eso ya tenemos un ejemplo de un ABM.\r\nLa ventana quedaria asi apenas se abre:\r\n\r\n![pantallaAuto](docs/pantallaAuto.png \"pantallaAuto\")\r\n\r\n\r\nVentana para agregar:\r\n\r\n![pantallaAutoAdd](docs/pantallaAutoAdd.png \"pantallaAutoAdd\")\r\n\r\nVentana para ver:\r\n\r\n![pantallaAutoView](docs/pantallaAutoView.png \"pantallaAutoView\")\r\n\r\nVentana para modificar:\r\n\r\n![pantallaAutoEdit](docs/pantallaAutoEdit.png \"pantallaAutoEdit\")\r\n\r\n\r\nEjemplo de uso para Multiples Clase:\r\n------------------------------\r\n\r\nEste framework agrega la opcion de usar multiples Clases y seleccionar cual ABM ir abrirndo para trabajar.\r\nPara esto agregamos la clase Chofer, ya adapatadar para el framework.\r\nEl codigo de Chofer es:\r\n\r\n```java\r\n@Title(title = \"Chofer ABM\", addMethod=\"add\", editMethod=\"edit\", removeMethod=\"remove\")\r\npublic class Chofer extends FWObject {\r\n\r\n\t@FieldText(name = \"Nombre del chofer\", validator=\"validateName\")\r\n\tprivate String nombre;\r\n\r\n\t@FieldText(name = \"Domicilio del chofer\", required=true)\r\n\tprivate String domicilio;\r\n\t\r\n\t@FieldCheck(modifiable = false, name = \"Tiene auto\")\r\n\tprivate boolean tieneAuto;\r\n\r\n\t@FieldSelector(choices = \"provincias\", modifiable = false, name = \"Provincias\")\r\n\tpublic String provincia;\r\n\r\n\tString[] provincias = { \"Buenos Aires\", \"Cordoba\", \"La Rioja\", \"Chaco\", \"Catamarca\" };\r\n\r\n\tpublic boolean validateName(String name){\r\n\t\tString NAME_PATTERN = \"^[a-zA-Z]{0,20}$\";\r\n\t\treturn Pattern.compile(NAME_PATTERN).matcher(name).matches();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String toString() {\r\n\t\tString texto = this.nombre + \", con domicilio en \" + this.domicilio + \" (provincia: \" + this.provincia + \") y \";\r\n\t\tif (this.tieneAuto) return texto + \"tiene auto\";\r\n\t\telse return texto + \" no tiene auto\";\r\n\t}\r\n\r\n\tpublic void add(Chofer chofer){\r\n\t\tthis.loggeo(\"Se agrego -> \" + chofer.toString());\r\n\t}\r\n\r\n\tpublic void edit(Chofer chofer){\r\n\t\tthis.loggeo(\"Se modifico -> \" + chofer.toString());\r\n\t}\r\n\t\r\n\tpublic void remove(Chofer chofer){\r\n\t\tthis.loggeo(\"Se elimino -> \" + chofer.toString());\r\n\t}\r\n\r\n\tpublic void loggeo(String texto){\r\n\t\t Logger logger = Logger.getLogger(\"ChoferLog\");  \r\n\t\t FileHandler fh;\r\n\t\ttry {\r\n\t\t\tfh = new FileHandler(\"/tmp/choferes.log\");\r\n\t\t\tlogger.addHandler(fh);\r\n\t\t\tSimpleFormatter formatter = new SimpleFormatter();\r\n\t\t\tfh.setFormatter(formatter);\r\n\t\t\tlogger.info(texto);\r\n\t\t} catch (SecurityException | IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nCon esta clase ya podemos crear en una clase de test una ejemplo de manejo de multiples clases\r\nEl codigo para la aplicacion seria:\r\n\r\n```java\r\nimport java.util.ArrayList;\r\n\r\nimport implementation.FWObject;\r\nimport implementation.applicationModel.MultiABMApplicationModel;\r\nimport implementation.ui.MultiMainWindow;\r\n\r\nimport org.uqbar.arena.Application;\r\nimport org.uqbar.arena.windows.Window;\r\n\r\npublic class TestApplication extends Application {\r\n\t\r\n\t@Override\r\n\tprotected Window<?> createMainWindow() {\r\n\t\tArrayList<Class<? extends FWObject>> list = new ArrayList<Class<? extends FWObject>>();\r\n\t\tlist.add(Auto.class);\r\n\t\tlist.add(Chofer.class);\r\n\t\treturn new MultiMainWindow(this, new MultiABMApplicationModel(list));\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tnew TestApplication().start();\r\n\t}\r\n}\r\n```\r\n\r\nCon esto ya tenemos una ventana que nos permite elegir la clase para trabajar en ABM:\r\n \r\n![pantallaMultiClass](docs/pantallaMultiClass.png \"pantallaMultiClass\")\r\n\r\nEn esa pantalla solo tocamos los botones y se abre el ABM de esa Clase y despues se puede retornar para abrir otra ABM.\r\n\r\n\r\nDesarrolladores:\r\n----------------\r\n\r\n- **Federico Gonzalez**\r\n- **Erwin Debusschere**\r\n- **Sergio Rivas**\r\n- **Alexis Chan**\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}